name: Build and Publish Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container startup
      if: github.event_name != 'pull_request'
      run: |
        echo "ðŸ§ª Testing container startup..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "
        print('Testing imports...')
        import discord
        print('âœ… discord.py imported')
        import openai  
        print('âœ… openai imported')
        from src.core.bot import PyQwertyBot
        print('âœ… Bot class imported')
        print('ðŸŽ‰ All imports successful!')
        "

  update-compose:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update docker-compose.yml
      run: |
        # Update docker-compose.yml to use the new GHCR image
        sed -i 's|build: ./bot|image: ghcr.io/${{ github.repository }}:latest|g' docker-compose.yml
        
        # Ensure production docker-compose file is up to date
        cat > docker-compose.prod.yml << 'EOF'
        services:
          pyqwerty-bot:
            image: ghcr.io/${{ github.repository }}:latest
            container_name: pyqwerty-bot
            restart: unless-stopped
            environment:
              - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
              - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
              - OPENROUTER_MODEL=${OPENROUTER_MODEL:-google/gemini-2.5-flash-preview-05-20}
              - RATE_LIMIT_MESSAGES=${RATE_LIMIT_MESSAGES:-30}
            ports:
              - "8080:8080"
            deploy:
              resources:
                limits:
                  memory: 512M
                  cpus: '0.5'
                reservations:
                  memory: 256M
                  cpus: '0.25'
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 60s
        EOF
    
    - name: Commit updated compose files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add docker-compose.yml docker-compose.prod.yml
        if ! git diff --staged --quiet; then
          git commit -m "Update Docker Compose to use GHCR image [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi